Copyright:
Marcel Weiß and Sebastian E. Ahnert, 2020

For usage, please cite:
Marcel Weiß and Sebastian E. Ahnert,
"Using small samples to estimate neutral component size and robustness in the genotype-phenotype map of RNA secondary structure",
J. R. Soc. Interface, 2020



########################################

This directory includes all the computational code used to generate the data as well as the data itself shown in the article. We proceed in 14 main steps, of which some comprise substeps, and the respective directories are labelled by the respective step number. For some steps, data generated in previous steps is used. In each (sub)directory, the generated data is stored in the zipped "results" directory, and can be (re-)generated by running the script (.sh) files in the (sub)directory. For step 7 and 8, we use the external software "neutral network size estimation" introduced by Jörg et al. (Jörg et al., BMC Bioinformatics 2008). The only external data that we use is stored in the subdirectory "fRNAdb_input".

In the following, the computational requirements, the external software, the external data, as well as the individual computational steps are explained together with information in which figure the generated data is used.

In case of questions, please contact: mw636@cam.ac.uk (Marcel Weiß).



# Computational requirements ########################################

All the provided code is written in Python. We use version 2.7.15.

Throughout the steps, we use the following Python packages / modules:

- sys (Python standard library)
- os (Python standard library)
- json (Python standard library)
- subprocess (Python standard library)
- random (Python standard library)

- viennarna (version 2.4.9), Python implementation of the ViennaRNA package: https://www.tbi.univie.ac.at/RNA/
- numpy (version 1.14.3)
- scipy (version 1.1.0)
- tabulate (version 0.8.2)



# External software ########################################

For step 7 ("7_fRNAdb_NNSE_NN_size_estimation") and step 8 ("8_fRNAdb_NNSE_NN_robustness_estimation"), we use the "neutral network size estimation" (we refer to it as "NNSE") introduced by Jörg et al. (Jörg et al., BMC Bioinformatics 2008). It can be downloaded with installation instructions from: https://www.ieu.uzh.ch/wagner/software/RNA08/index.html.

We compile the C program on a Linux machine (on which the ViennaRNA package with version 2.4.9 is installed) in two ways. 

In "7_fRNAdb_NNSE_NN_size_estimation", the downloaded code is in the subdirectory "_get_size_NN". We are only able to compile it by changing lines 156-159 in "get_size_NN.c" to: 
#include "ViennaRNA/fold_vars.h"
#include "ViennaRNA/fold.h"
#include "ViennaRNA/utils.h"
#include "ViennaRNA/inverse.h"
#include "ViennaRNA/part_func.h"
With these modifications, we generate a program "get_size_NN" that is also added to the main directory "7_fRNAdb_NNSE_NN_size_estimation".

In "8_fRNAdb_NNSE_NN_robustness_estimation", the downloaded code is in the subdirectory "_get_size_NN_w_RMU". Here, we rename the file "get_size_NN.c" to "get_size_NN_w_RMU.c". As before, we change lines 156-159 to: 
#include "ViennaRNA/fold_vars.h"
#include "ViennaRNA/fold.h"
#include "ViennaRNA/utils.h"
#include "ViennaRNA/inverse.h"
#include "ViennaRNA/part_func.h"
We also modify line 187 from "#define WITH_RMU FALSE" to "#define WITH_RMU TRUE" in order to additionally allow estimations of neutral network robustness. With these modifications, we generate a program "get_size_NN_w_RMU" that is also added to the main directory "8_fRNAdb_NNSE_NN_robustness_estimation".



# External data ########################################

When considering naturally occurring functional non-coding RNA sequences, we take sequences from the fRNA database ("fRNAdb") (Kin et al., Nucleic Acids Research 2007; Mituyama et al., Nucleic Acids Research 2008). It can be accessed at: http://www.ncrna.org/. It is an archived database, which was last updated in 2011. We accessed it and downloaded the data from it on October 3, 2018.

In detail, using the "Advanced search", we filtered the database for sequences of fixed lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, respectively. By clicking "Download: Selected", we downloaded the .csv files that are stored in the directory "fRNAdb_input". We labelled the files according to the respective sequence length.



# Computational steps ########################################

# 1. Phenotype analysis ("1_phenotype_analysis")

The aim of this code is to determine the phenotypes of all genotypes for the RNA secondary structure GP map of a given sequence length. The code is written in such a way that it is parallelised, i.e. the genotype list is split into sections which are analysed separately.

We run the code for sequence lengths 12, 13, 14, 15 and 16, and split the genotype lists into 32 sections, respectively.

Input:
- command line arguments

Output files:
- "L.XX1_dictionary_genotype_index_to_phenotype_index_section.XX2.json", where XX1 is the sequence length and XX2 the genotype list section number
> dictionary that assigns each genotype index of the given genotype list section to a provisional phenotype index (excluding undefined phenotype)
> for XX1=(14,15,16), the files are not included due to their size, but can be requested from us
- "L.XX1_phenotypes_section.XX2.txt", where XX1 is the sequence length and XX2 the genotype list section number
> table that stores the information of the provisional phenotypes of the given genotype list section



# 2. NC analysis ("2_NC_analysis")

This step is split into three substeps.


## 2.1 ("2_NC_analysis/step_1")

The aim of this code is to combine the results from step 1 ("1_phenotype_analysis"), i.e. to find all genotypes that map to each of the phenotypes, respectively, for the RNA secondary structure GP map of a given sequence length. 

We run the code for sequence lengths 12, 13, 14, 15 and 16, and the genotype list sectioning considered in step 1 ("1_phenotype_analysis").

Input:
- command line arguments
- results from "1_phenotype_analysis"

Output files:
- "L.XX1_dictionary_genotype_index_to_phenotype_index.XX2.json", where XX1 is the sequence length and XX2 the phenotype index
> dictionary that assigns each genotype index (that maps to the given phenotype (index)) to the given phenotype index (excluding undefined phenotype)
> for XX1=(14,15,16), the files are not included due to their size, but can be requested from us
- "L.XX1_phenotypes.txt", where XX1 is the sequence length
> table that stores the information of the phenotypes


## 2.2 ("2_NC_analysis/step_2")

The aim of this code is to find all neutral components, i.e. all genotypes that are part of each of the neutral components, respectively, and their characteristics, for the RNA secondary structure GP map of a given sequence length. The code is written in such a way that it is parallelised, i.e. each phenotype (index) is considered separately.

We run the code for sequence lengths 12, 13, 14, 15 and 16, and the number of defined phenotypes found in step 2.1 ("2_NC_analysis/step_1").

Input:
- command line arguments
- results from "2_NC_analysis/step_1"

Output files:
- "L.XX1_dictionary_genotype_index_to_NC_index_phenotype_index.XX2.json", where XX1 is the sequence length and XX2 the phenotype index
> dictionary that assigns each genotype index (that maps to the given phenotype (index)) to a provisional neutral component index (excluding undefined phenotype)
> for XX1=(14,15,16), the files are not included due to their size, but can be requested from us
- "L.XX1_neutral_component_characteristics_phenotype_index.XX2.txt", where XX1 is the sequence length and XX2 the phenotype index
> table that stores the characteristics of the neutral components for the given phenotype index
- "L.XX1_neutral_component_average_neutral_mutations_per_site_phenotype_index.XX2.txt", where XX1 is the sequence length and XX2 the phenotype index
> table that stores the average number of neutral mutations per site of the neutral components for the given phenotype index
- "L.XX1_neutral_component_SD_neutral_mutations_per_site_phenotype_index.XX2.txt", where XX1 is the sequence length and XX2 the phenotype index
> table that stores the standard deviation of the number of neutral mutations per site of the neutral components for the given phenotype index


## 2.3 ("2_NC_analysis/step_3")

The aim of this code is to combine the results from step 2.2 ("2_NC_analysis/step_2"), and to rank and order the phenotypes and neutral components according to their frequency / size.

We run the code for sequence lengths 12, 13, 14, 15 and 16.

Input:
- command line arguments
- results from "2_NC_analysis/step_1"
- results from "2_NC_analysis/step_2"

Output files:
- "L.XX1_dictionary_genotype_index_to_NC_index.json", where XX1 is the sequence length
> dictionary that assigns each genotype index to a neutral component index (excluding undefined phenotype)
> for XX1=(14,15,16), the files are not included due to their size, but can be requested from us
> FIGURE 1, with XX1=(12)
- "L.XX1_phenotype_characteristics.txt", where XX1 is the sequence length
> table that stores the characteristics of the phenotypes
- "L.XX1_neutral_component_characteristics.txt", where XX1 is the sequence length
> table that stores the characteristics of the neutral components
> FIGURE 1, with XX1=(12)
> FIGURE 2, with XX1=(15)
> TABLE SI, with XX1=(15)
- "L.XX1_neutral_component_average_neutral_mutations_per_site.txt", where XX1 is the sequence length
> table that stores the average number of neutral mutations per site of the neutral components
- "L.XX1_neutral_component_SD_neutral_mutations_per_site.txt", where XX1 is the sequence length
> table that stores the standard deviation of the number of neutral mutations per site of the neutral components



# 3. NC size estimation validation ("3_NC_size_estimation_validation")

The aim of this code is to find the optimal correction parameter alpha that optimises the neutral component size estimates (minimum root-mean-square deviation between estimated and true neutral component sizes) as well as the respective optimised neutral component size estimates for the RNA secondary structure GP map of a given sequence length. In addition, the code performs an error analysis for a fixed list of correction parameters alpha.

We run the code for sequence lengths 12, 13, 14, 15 and 16.

Input:
- command line arguments
- results from "2_NC_analysis/step_3"

Output files:
- "L.XX1_neutral_component_optimised_NC_size_estimates.txt", where XX1 is the sequence length
> table that stores the optimised neutral component size estimates
> FIGURE S1, with XX1=(12,13,14,15,16)
- "L.XX1_neutral_component_size_estimation_validation_results.txt", where XX1 is the sequence length
> table that stores the overall errors (average difference, standard deviation of difference, root-mean-square deviation) for a list of correction parameters alpha, as well as the optimal alpha and the respective overall errors
> FIGURE 4, with XX1=(12,13,14,15,16)
> FIGURE S1, with XX1=(12,13,14,15,16)
> FIGURE S3, with XX1=(12,13,14,15,16)



# 4. NC sampling ("4_NC_sampling")

The aim of this code is to generate genotype samples from known neutral components of the RNA secondary structure GP map of a given sequence length, and to measure the sample characteristics (average number of neutral mutations per site, standard deviation of the number of neutral mutations per site) of the samples. The code is written in such a way that it can be parallelised.

We run the code for sequence length 15, a maximum neutral component rank of 1000, random, random walk and site scanning sampling, samples of size 1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500 and 1000, a random subsample size of 10 (for random walk and site scanning sampling), and 100 samples for each sampling method, sample size combination and neutral component, respectively.

Input:
- command line arguments
- results from "2_NC_analysis/step_3"

Output files:
- "L.XX1_XX2_sampling_sample_size.XX3_sample_average_neutral_mutations_per_site_NC_rank.XX4.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size and XX4 the neutral component rank
> table that stores the sample average number of neutral mutations per site for the samples considered for the given neutral component and sampling specifications (in case of no random subsampling)
- "L.XX1_XX2_sampling_sample_size.XX3_sample_SD_neutral_mutations_per_site_NC_rank.XX4.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size and XX4 the neutral component rank
> table that stores the sample standard deviation of the number of neutral mutations per site for the samples considered for the given neutral component and sampling specifications (in case of no random subsampling)
- "L.XX1_XX2_w_random_subsampling_sample_size.XX3_random_subsample_size.XX4_sample_average_neutral_mutations_per_site_NC_rank.XX5.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size, XX4 the random subsample size and XX5 the neutral component rank
> table that stores the sample average number of neutral mutations per site for the samples considered for the given neutral component and sampling specifications (in case of random subsampling)
- "L.XX1_XX2_w_random_subsampling_sample_size.XX3_random_subsample_size.XX4_sample_SD_neutral_mutations_per_site_NC_rank.XX5.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size, XX4 the random subsample size and XX5 the neutral component rank
> table that stores the sample standard deviation of the number of neutral mutations per site for the samples considered for the given neutral component and sampling specifications (in case of random subsampling)



# 4.1. NC sampling for Figure 1 ("4_1_NC_sampling_for_Figure_1")

This is a substep. The code is a modified version of the code used in step 4 ("4_NC_sampling"), and its aim is to generate an example random, random walk and site scanning sample (that is shown in Figure 1) for a given neutral component of the RNA secondary structure GP map of a given sequence length, and sample size.

We run the code for sequence length 12, the NC of rank 129, random, random walk and site scanning sampling, and a sample size of 30.

Input:
- command line arguments
- results from "2_NC_analysis/step_3"

Output files:
- "L.XX1_XX2_sampling_sample_size.XX3_sample_genotypes_NC_rank.XX4.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size and XX4 the neutral component rank
> table that store the genotype indices and sequences for the given neutral component and sampling specifications
> FIGURE 1, with XX1=(12), XX2=("random","RW","site_scanning"), XX3=(30), XX4=(129) 



# 5. NC estimations from samples and error quantification ("5_NC_estimations_from_samples_and_error_quantification")

The aim of this code is to make neutral component size and robustness estimates from the samples and measured characteristics in step 4 ("4_NC_sampling"), as well as to perform an error analysis of the estimates. For the neutral component size estimation, the optimal correction parameter alpha determined in step 3 ("3_NC_size_estimation_validation") is used.

We run the code for the same specifications considered in step 4 ("4_NC_sampling").

Input:
- command line arguments
- results from "2_NC_analysis/step_3"
- results from "3_NC_size_estimation_validation"
- results from "4_NC_sampling"

Output files:
- "L.XX1_XX2_sampling_sample_size.XX3_sample_NC_estimates_NC_rank.XX4.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size and XX4 the neutral component rank
> table that stores the neutral component size and robustness estimates for the samples considered for the given neutral component and sampling specifications (in case of no random subsampling)
> FIGURE 2, with XX1=(15), XX2=("random","RW","site_scanning"), XX3=(10,100,1000), XX4=(1,125,250,375,500,625,750,875,1000)
- "L.XX1_XX2_w_random_subsampling_sample_size.XX3_random_subsample_size.XX4_sample_NC_estimates_NC_rank.XX5.txt", where XX1 is the sequence length, XX2 the sampling method, XX3 the sample size, XX4 the random subsample size and XX5 the neutral component rank
> table that stores the neutral component size and robustness estimates for the samples considered for the given neutral component and sampling specifications (in case of random subsampling)
> FIGURE 2, with XX1=(15), XX2=("RW","site_scanning"), XX3=(1000), XX4=(10), XX5=(1,125,250,375,500,625,750,875,1000)
- "L.XX1_NC_estimations_from_samples_error_quantification.txt", where XX1 is the sequence length
> table that stores the overall errors (average difference, standard deviation of difference, root-mean-square deviation) for the considered sampling specifications
> FIGURE 3, with XX1=(15)
> FIGURE S2, with XX1=(15)



# 6. fRNAdb input filtering ("6_fRNAdb_input_filtering")

The aim of this code is to step-wise filter the sequences taken from the fRNAdb for our purposes, i.e. removal of sequences that are labelled "Putative"/"putative", sequences that are labelled "PiRNA"/"piRNA" and sequences that are incompatible (non-standard nucleotides or undefined phenotype), as well as determining the structures (phenotypes) of the filtered sequences. In addition, the code randomly chooses 100 sequences from the filtered sequences for each considered sequence length that are used for the neutral network robustness estimation by the NNSE.

Input:
- data from "fRNAdb_input"

Output files:
- "L.XX1_filtered_fRNAdb_input.txt", where XX1 is the sequence length
> table that stores the filtered sequences and predicted structures
- "L.XX1_filtered_fRNAdb_input_for_NNSE_robustness_estimation.txt", where XX1 is the sequence length
> table that stores the 100 randomly chosen filtered sequences and predicted structures used for the neutral network robustness estimation by the NNSE
- "fRNAdb_input_filtering_summary.txt"
> table that stores a summary of the filtering (i.e. number of sequences and number of sequences that are removed at every filtering step)
> TABLE SII



# 7. fRNAdb NNSE NN size estimation ("7_fRNAdb_NNSE_NN_size_estimation")

The aim of this code is to run the NNSE program "get_size_NN" in a subprocess and to read the output for estimates of the neutral network size for the filtered fRNAdb sequences (in fact for their predicted structures) of a given sequence length. The program "get_size_NN" is run using default parameters, apart from the number of measurements, which we set from 10 to 1. The code is written in such a way that it is parallelised, i.e. the list of sequences is split into sections which are analysed separately.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, and 100, and various total numbers of sections, respectively.

Input:
- command line arguments
- results from "6_fRNAdb_input_filtering"

Output files:
- "NNSE_output_XX1.txt", where XX1 is the fRNAdb sequence ID
> output file from the program "get_size_NN" for a given fRNAdb sequence ID (predicted structure)
- "L.%s_fRNAdb_NNSE_NN_size_estimates_section.%s.txt", where XX1 is the sequence length and XX2 the sequence list section number
> table that stores the neutral network size estimates of the given sequence list section



# 8. fRNAdb NNSE NN robustness estimation ("8_fRNAdb_NNSE_NN_robustness_estimation")

The aim of this code is to run the modified NNSE program "get_size_NN_w_RMU" in a subprocess and to read the output for estimates of the neutral network robustness for the 100 randomly chosen filtered fRNAdb sequences (in fact for their predicted structures) of a given sequence length. The program "get_size_NN_w_RMU" is run using default parameters, apart from the number of measurements, which we set from 10 to 1. The code is written in such a way that it is parallelised, i.e. the list of sequences is split into sections which are analysed separately.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, and 50 sections, respectively.

Input:
- command line arguments
- results from "6_fRNAdb_input_filtering"

Output files:
- "NNSE_output_XX1.txt", where XX1 is the fRNAdb sequence ID
> output file from the program "get_size_NN_w_RMU" for a given fRNAdb sequence ID (predicted structure)
- "L.XX1_fRNAdb_NNSE_NN_rob_estimates_section.XX2.txt", where XX1 is the sequence length and XX2 the sequence list section number
> table that stores the neutral network robustness estimates of the given sequence list section



# 9. fRNAdb NNSE NN estimates processing ("9_fRNAdb_NNSE_NN_estimates_processing")

The aim of this code is to combine the NNSE results from step 8 ("8_fRNAdb_NNSE_NN_robustness_estimation") and 9 ("9_fRNAdb_NNSE_NN_estimates_processing"), which are currently split across multiple tables, to one table for the neutral network size and one table for the neutral network robustness estimates for each sequence length, respectively. In addition, the code counts the number of sequences for which the NNSE does not converge for the neutral network size estimates.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100.

Input:
- command line arguments
- results from "7_fRNAdb_NNSE_NN_size_estimation"
- results from "8_fRNAdb_NNSE_NN_robustness_estimation"

Output files:
- "L.XX1_fRNAdb_NNSE_NN_size_estimates.txt", where XX1 is the sequence length
> table that stores the neutral network size estimates
> FIGURE 6, with XX1=(50,100)
- "L.XX1_fRNAdb_NNSE_NN_rob_estimates.txt", where XX1 is the sequence length
> table that stores the neutral network robustness estimates
> FIGURE 6, with XX1=(50,100)
- "NNSE_NN_size_estimates_not_converging_summary.txt"
> table that stores the number of sequences for which the NNSE is not converging for the neutral network size estimates
> TABLE SII



# 10. fRNAdb NC sampling ("10_fRNAdb_NC_sampling")

The aim of this code is to generate neutral component genotype samples (accelerated site scanning sampling and random subsampling) starting from fRNAdb sequences, and to measure the sample characteristics (average number of neutral mutations per site, standard deviation of the number of neutral mutations per site) of the samples. In addition, the code counts the number of calls of RNA.fold(). The code is written in such a way that it is parallelised, i.e. the list of sequences is split into sections which are analysed separately.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100 (split into various total numbers of sections, respectively), samples of size 100, 1000 and 10000, and random subsamples of size 10 and 100 for each considered fRNAdb sequence, respectively.

Input:
- command line arguments
- results from "6_fRNAdb_input_filtering"

Output files:
- "L.XX1_fRNAdb_NC_sampling_sample_average_neutral_mutations_per_site_section.XX2.txt", where XX1 is the sequence length and XX2 the sequence list section number
> table that stores the sample average number of neutral mutations per site as well as the number of RNA.fold() calls for the sequences of the given sequence list section and all considered sample size combinations
- "L.XX1_fRNAdb_NC_sampling_sample_SD_neutral_mutations_per_site_section.XX2.txt", where XX1 is the sequence length and XX2 the sequence list section number
> table that stores the sample standard deviation of the number of neutral mutations per site (as well as again the number of RNA.fold() calls) for the sequences of the given sequence list section and all considered sample size combinations



# 11. fRNAdb NC sampling processing ("11_fRNAdb_NC_sampling_processing")

The aim of this code is to combine the NC sampling results from step 10 ("10_fRNAdb_NC_sampling"), which are currently split across multiple tables, to one table for each sequence length, respectively. In addition, the code analyses the number of RNA.fold() calls.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, and the sample size combinations considered in step 10 ("10_fRNAdb_NC_sampling").

Input:
- command line arguments
- results from "10_fRNAdb_NC_sampling"

Output files:
- "L.XX1_fRNAdb_NC_sampling_sample_average_neutral_mutations_per_site.txt", where XX1 is the sequence length
> table that stores the sample average number of neutral mutations per site for all considered sample size combinations
- "L.XX1_fRNAdb_NC_sampling_sample_SD_neutral_mutations_per_site.txt", where XX1 is the sequence length
> table that stores the sample standard deviation of the number of neutral mutations per site for all considered sample size combinations
- "L.XX1_fRNAdb_NC_sampling_RNAfold_counting_analysis.txt", where XX1 is the sequence length
> table that stores the RNA.fold() call analysis
- "fRNAdb_NC_sampling_RNAfold_counting_overall_analysis.txt"
> table that stores averages (for given sequence lengths) of the RNA.fold() call analysis
> FIGURE 9



# 12. fRNAdb NN size estimates comparison optimisation ("12_fRNAdb_NN_size_estimates_comparison_optimisation")

The aim of this code is to find the optimal correction parameter alpha for our neutral component size estimation method that optimises our extrapolated neutral network size estimates (minimum root-mean-square deviation between our extrapolated neutral network size estimates and the estimates by the NNSE) for a given sequence length and sample size combination. In addition, the code calculates the respective optimised neutral component size and extrapolated neutral network size estimates for our method, as well as their errors.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, and the sample size combinations considered in step 10 ("10_fRNAdb_NC_sampling").

Input:
- command line arguments
- results from "9_fRNAdb_NNSE_NN_estimates_processing"
- results from "11_fRNAdb_NC_sampling_processing"

Output files:
- "L.XX1_fRNAdb_NC_sampling_sample_size.XX2_random_subsample_size.XX3_optimised_neutral_component_and_network_size_estimates.txt", where XX1 is the sequence length, XX2 the sample size and XX3 the random subsample size
> table that stores the optimised neutral component size and extrapolated neutral network size estimates for our approach for the given sample size combination
- "fRNAdb_NC_sampling_optimised_neutral_network_size_estimates_comparison_results.txt"
> table that stores the optimal alphas as well as the respective overall errors (average difference, standard deviation of difference, root-mean-square deviation, relative root-mean-square deviation)
> FIGURE 4
> FIGURE 7
> FIGURE S4
> FIGURE S6
> FIGURE S7



# 12.1 fRNAdb NN size estimates comparison optimisation without NC--NN extrapolation ("12_1_fRNAdb_NN_size_estimates_comparison_optimisation_wo_NC_NN_extrapolation")

This substep is similar to step 12 ("12_fRNAdb_NN_size_estimates_comparison_optimisation") but without considering the NC--NN size extrapolation, i.e. the (extrapolated) estimated NN sizes are considered to be equal to the estimated NC sizes. In addition to the search for the optimal correction parameter alpha, the code performs an error analysis for a given list of correction parameters alpha.

We run the code for sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, the sample size combinations considered in step 10 ("10_fRNAdb_NC_sampling"), and alpha values of 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45 and 50.

Input:
- command line arguments
- results from "9_fRNAdb_NNSE_NN_estimates_processing"
- results from "11_fRNAdb_NC_sampling_processing"

Output files:
- "L.XX1_fRNAdb_NC_sampling_sample_size.XX2_random_subsample_size.XX3_optimised_neutral_component_and_network_size_estimates_wo_NC_NN_extrapolation.txt", where XX1 is the sequence length, XX2 the sample size and XX3 the random subsample size
> table that stores the optimised neutral component size and (non-extrapolated) neutral network size estimates for our approach for the given sample size combination
- "fRNAdb_NC_sampling_optimised_neutral_network_size_estimates_comparison_results_wo_NC_NN_extrapolation.txt"
> table that stores the overall errors (average difference, standard deviation of difference, root-mean-square deviation, relative root-mean-square deviation) for a list of correction parameters alpha, as well as the optimal alphas and the respective overall errors
> FIGURE S3
> FIGURE S4
> FIGURE S5



# 13. Optimal alpha fits ("13_opt_alpha_fits")

The aim of this code is to fit a functional relation to the sequence length dependence of the found optimal correction parameters alpha, as well as to determine the final fit parameters by averaging over the fit results as specified in the article.

We run the code for the exhaustively analysed sequence lengths 12, 13, 14, 15, and 16, the fRNAdb sequence lengths 20, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95 and 100, and the sample size combinations considered in step 10 ("10_fRNAdb_NC_sampling") for the fRNAdb sequences. For the averaging of the final fit parameters, we consider the sample sizes 1000 and 10000 and the random subsample sizes 10 and 100. 

Input:
- command line arguments
- results from "3_NC_size_estimation_validation"
- results from "12_fRNAdb_NN_size_estimates_comparison_optimisation"

Output files:
- "optimised_alpha_fit_results.txt"
> table that stores the fit parameter results for the considered sample size combinations
> FIGURE 4
> TABLE I
- "averaged_optimised_alpha_fit_results.txt"
> table that stores the averaged and final fit parameters



# 14. fRNAdb NC and NN estimates and error quantification ("14_fRNAdb_NC_and_NN_estimates_and_error_quantification")

The aim of this code is to calculate for our method the estimated neutral component sizes and robustness as well as the extrapolated neutral network sizes and robustness for a given fRNAdb sequence length and sample size combination. For our neutral component size estimation method, the averaged fit parameters from step 13 ("13_opt_alpha_fits") are used to determine the correction parameter alpha from the functional relation. In addition, the code performs an error analysis by comparing our extrapolated neutral network estimates with those by the NNSE.

Input:
- command line arguments
- results from "9_fRNAdb_NNSE_NN_estimates_processing"
- results from "11_fRNAdb_NC_sampling_processing"
- results from "13_opt_alpha_fits"

Output files:
- "L.XX1_fRNAdb_NC_sampling_sample_size.XX2_random_subsample_size.XX3_neutral_component_and_network_size_estimates.txt", where XX1 is the sequence length, XX2 the sample size and XX3 the random subsample size
> table that stores the neutral component size and extrapolated neutral network size estimates for our approach for the given sample size combinations
> FIGURE 5, with XX1=(50,100), XX2=(1000), XX3=(10)
> FIGURE 6, with XX1=(50,100), XX2=(1000), XX3=(10)
- "L.XX1_fRNAdb_NC_sampling_sample_size.XX2_random_subsample_size.XX3_neutral_component_and_network_robustness_estimates.txt", where XX1 is the sequence length, XX2 the sample size and XX3 the random subsample size
> table that stores the neutral component robustness and extrapolated neutral network robustness estimates for our approach for the given sample size combinations
> FIGURE 5, with XX1=(50,100), XX2=(1000), XX3=(10)
> FIGURE 6, with XX1=(50,100), XX2=(1000), XX3=(10)
- "fRNAdb_NC_sampling_neutral_network_size_estimates_comparison_results.txt"
> table that stores the overall errors (average difference, standard deviation of difference, root-mean-square deviation, relative root-mean-square deviation) for the extrapolated neutral network size estimates
> FIGURE 7
> FIGURE S6
> FIGURE S7
- "fRNAdb_NC_sampling_neutral_network_robustness_estimates_comparison_results.txt"
> table that stores the overall errors (average difference, standard deviation of difference, root-mean-square deviation) for the extrapolated neutral network robustness estimates
> FIGURE 8
> FIGURE S8
